{
	"info": {
		"_postman_id": "e6f9393b-4089-49f5-bfa3-4fa68489f824",
		"name": "collection_test_01",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "35033453-e6f9393b-4089-49f5-bfa3-4fa68489f824"
	},
	"item": [
		{
			"name": "Access application home",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "62f22bef-792a-4435-a745-8066e332a5b8",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "a8df3456-c714-4cc9-89d3-6b56606e0c28",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://www.pseudojson.com/",
					"protocol": "http",
					"host": [
						"www",
						"pseudojson",
						"com"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get first product",
			"id": "d64b4b3d-0fcc-4114-afab-ca9bcd06616c",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://www.pseudojson.com/products/1",
					"protocol": "http",
					"host": [
						"www",
						"pseudojson",
						"com"
					],
					"path": [
						"products",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Access login page",
			"id": "38e0e135-21f8-4f21-a2e3-d203ad882ec4",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://www.pseudojson.com/login",
					"protocol": "http",
					"host": [
						"www",
						"pseudojson",
						"com"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Perform login into application",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d7d87c8f-327d-49ac-99e1-580a2ff92159",
						"exec": [
							"// Test for authentication and authorization mechanisms\r",
							"// pm.test(\"Response has valid authentication and authorization mechanisms using bearer token\", function () {\r",
							"//     pm.expect(pm.request.headers.get(\"Authorization\")).to.include(\"Bearer\");\r",
							"// });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "24266b64-8d7e-472f-93d0-972f72c12bb4",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "admin",
							"type": "text"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://www.pseudojson.com/login",
					"protocol": "http",
					"host": [
						"www",
						"pseudojson",
						"com"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Access dashboard",
			"id": "17df4d24-8229-47c0-b215-5eff68e378fc",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiYWRtaW4iLCJleHAiOjE3MTYwNTgxNDF9.LaGrExB0KCHP9zAH3ixZtvDuJmyIdO1cfo1DPCu1CRM",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Auth",
						"value": ""
					},
					{
						"key": "Cookie",
						"value": "session=eyJsb2dnZWRfaW4iOnRydWUsInRva2VuIjoiZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SjFjMlZ5SWpvaVlXUnRhVzRpTENKbGVIQWlPakUzTVRZd05UZ3pOREY5LldldEp5UHVmaUdVOTNJY3JzQ2dhbXBNRkFHbVhFckZqS3Z6MWdZQlJaX2sifQ.Zkjq1Q.trwqFyO_MJhcw4GNOQGTTQwaltE"
					}
				],
				"url": {
					"raw": "http://www.pseudojson.com/dashboard",
					"protocol": "http",
					"host": [
						"www",
						"pseudojson",
						"com"
					],
					"path": [
						"dashboard"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add new product",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4f949c58-f380-426d-bcde-6b5f2286e185",
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"var template = `\r",
							"<style type=\"text/css\">\r",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
							"    .tftable tr {background-color:#ffffff;}\r",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
							"    .tftable tr:hover {background-color:#e0ffff;}\r",
							"</style>\r",
							"\r",
							"<table class=\"tftable\" border=\"1\">\r",
							"    <tr>\r",
							"        <th>ID</th>\r",
							"        <th>Brand</th>\r",
							"        <th>Category</th>\r",
							"        <th>Description</th>\r",
							"        <th>Discount Percentage</th>\r",
							"        <th>Images</th>\r",
							"        <th>Price</th>\r",
							"        <th>Rating</th>\r",
							"        <th>Stock</th>\r",
							"        <th>Thumbnail</th>\r",
							"        <th>Title</th>\r",
							"    </tr>\r",
							"    <tr>\r",
							"        <td>{{response.id}}</td>\r",
							"        <td>{{response.brand}}</td>\r",
							"        <td>{{response.category}}</td>\r",
							"        <td>{{response.description}}</td>\r",
							"        <td>{{response.discountPercentage}}</td>\r",
							"        <td>{{response.images}}</td>\r",
							"        <td>{{response.price}}</td>\r",
							"        <td>{{response.rating}}</td>\r",
							"        <td>{{response.stock}}</td>\r",
							"        <td>{{response.thumbnail}}</td>\r",
							"        <td>{{response.title}}</td>\r",
							"    </tr>\r",
							"</table>\r",
							"`;\r",
							"\r",
							"function constructVisualizerPayload() {\r",
							"    return {response: pm.response.json()}\r",
							"}\r",
							"\r",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "5df4674e-f4d8-4ad8-9cad-9467a2ba3470",
						"exec": [
							"// Function to generate a random 5-digit number with prefix 88\r",
							"function generateRandomId() {\r",
							"    const randomNumber = Math.floor(10000 + Math.random() * 90000);\r",
							"    return '88' + randomNumber;\r",
							"}\r",
							"\r",
							"// Generate the random ID\r",
							"const randomId = generateRandomId();\r",
							"\r",
							"// Set the random ID in the environment variable\r",
							"pm.environment.set(\"randomId\", randomId);\r",
							"\r",
							"// Send login request to get the token\r",
							"pm.sendRequest({\r",
							"    url: 'http://www.pseudojson.com/login',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'multipart/form-data'\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'formdata',\r",
							"        formdata: [\r",
							"            { key: 'username', value: 'admin' },\r",
							"            { key: 'password', value: 'admin' }\r",
							"        ]\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.error('Request failed:', err);\r",
							"        return;\r",
							"    }\r",
							"\r",
							"    try {\r",
							"        var jsonData = res.json();\r",
							"        pm.environment.set(\"Token\", jsonData.token);\r",
							"        console.log('Token:', jsonData.token);\r",
							"    } catch (e) {\r",
							"        console.error('Failed to parse JSON response:', e);\r",
							"        console.error('Response body:', res.text());\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "fa26af29-3350-4cba-8f2b-bc221b7309f0",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"brand\": \"brand {{randomId}}\",\r\n    \"category\": \"category {{randomId}}\",\r\n    \"description\": \"description {{randomId}}\",\r\n    \"discountPercentage\": 12.96,\r\n    \"id\": {{randomId}},\r\n    \"images\": [\r\n        \"https://rightclickit.com.au/wp-content/uploads/2018/09/IMAGE-COMING-SOON-1000.jpg\"\r\n    ],\r\n    \"price\": 1449,\r\n    \"rating\": 12.69,\r\n    \"stock\": 188,\r\n    \"title\": \"title {{randomId}}\"\r\n}\r\n"
				},
				"url": {
					"raw": "http://www.pseudojson.com/products",
					"protocol": "http",
					"host": [
						"www",
						"pseudojson",
						"com"
					],
					"path": [
						"products"
					]
				},
				"description": "\nThis HTTP POST request is used to create a new product on the server. The request should include a payload in the raw request body type with the keys \"brand\", \"category\", \"description\", \"discountPercentage\", \"id\", \"images\", \"price\", \"rating\", \"stock\", and \"thumbnail\". The last response returned a status code of 401 with a JSON body containing an \"error\" key.\n\nTo prevent duplicate product IDs in the request payload, it is recommended to update the \"id\" key in the request body to send a random ID for each new product.\n"
			},
			"response": []
		},
		{
			"name": "Update Product Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c0f56c5f-1cca-4b5d-a133-ae9c1178744a",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"var template = `\r",
							"<style type=\"text/css\">\r",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
							"    .tftable tr {background-color:#ffffff;}\r",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
							"    .tftable tr:hover {background-color:#e0ffff;}\r",
							"</style>\r",
							"\r",
							"<table class=\"tftable\" border=\"1\">\r",
							"    <tr>\r",
							"        <th>ID</th>\r",
							"        <th>Brand</th>\r",
							"        <th>Category</th>\r",
							"        <th>Description</th>\r",
							"        <th>Discount Percentage</th>\r",
							"        <th>Images</th>\r",
							"        <th>Price</th>\r",
							"        <th>Rating</th>\r",
							"        <th>Stock</th>\r",
							"        <th>Thumbnail</th>\r",
							"        <th>Title</th>\r",
							"    </tr>\r",
							"    <tr>\r",
							"        <td>{{response.id}}</td>\r",
							"        <td>{{response.brand}}</td>\r",
							"        <td>{{response.category}}</td>\r",
							"        <td>{{response.description}}</td>\r",
							"        <td>{{response.discountPercentage}}</td>\r",
							"        <td>{{response.images}}</td>\r",
							"        <td>{{response.price}}</td>\r",
							"        <td>{{response.rating}}</td>\r",
							"        <td>{{response.stock}}</td>\r",
							"        <td>{{response.thumbnail}}</td>\r",
							"        <td>{{response.title}}</td>\r",
							"    </tr>\r",
							"</table>\r",
							"`;\r",
							"\r",
							"function constructVisualizerPayload() {\r",
							"    return {response: pm.response.json()}\r",
							"}\r",
							"\r",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "be6685d0-dd74-48bf-9dbe-580e99fb1642",
						"exec": [
							"// Function to generate a random 5-digit number with prefix 88\r",
							"function generateRandomId() {\r",
							"    const randomNumber = Math.floor(10000 + Math.random() * 90000);\r",
							"    return '88' + randomNumber;\r",
							"}\r",
							"\r",
							"// Generate the random ID\r",
							"const randomId = generateRandomId();\r",
							"\r",
							"// Set the random ID in the environment variable\r",
							"pm.environment.set(\"randomId\", randomId);\r",
							"\r",
							"// Send login request to get the token\r",
							"pm.sendRequest({\r",
							"    url: 'http://www.pseudojson.com/login',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'multipart/form-data'\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'formdata',\r",
							"        formdata: [\r",
							"            { key: 'username', value: 'admin' },\r",
							"            { key: 'password', value: 'admin' }\r",
							"        ]\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.error('Request failed:', err);\r",
							"        return;\r",
							"    }\r",
							"\r",
							"    try {\r",
							"        var jsonData = res.json();\r",
							"        pm.environment.set(\"Token\", jsonData.token);\r",
							"        console.log('Token:', jsonData.token);\r",
							"    } catch (e) {\r",
							"        console.error('Failed to parse JSON response:', e);\r",
							"        console.error('Response body:', res.text());\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "2300fba1-8ec0-405e-b936-97d5ea0b575e",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"brand\": \"brand {{randomId}}\",\r\n    \"category\": \"category {{randomId}}\",\r\n    \"description\": \"description {{randomId}}-PUT\",\r\n    \"discountPercentage\": 12.96,\r\n    \"id\": 8814629,\r\n    \"images\": [\r\n        \"https://rightclickit.com.au/wp-content/uploads/2018/09/IMAGE-COMING-SOON-1000.jpg\"\r\n    ],\r\n    \"price\": 1449,\r\n    \"rating\": 12.69,\r\n    \"stock\": 188,\r\n    \"title\": \"title {{randomId}}-PUT\"\r\n}\r\n"
				},
				"url": {
					"raw": "http://www.pseudojson.com/products/8814629",
					"protocol": "http",
					"host": [
						"www",
						"pseudojson",
						"com"
					],
					"path": [
						"products",
						"8814629"
					]
				},
				"description": "\nThis HTTP POST request is used to create a new product on the server. The request should include a payload in the raw request body type with the keys \"brand\", \"category\", \"description\", \"discountPercentage\", \"id\", \"images\", \"price\", \"rating\", \"stock\", and \"thumbnail\". The last response returned a status code of 401 with a JSON body containing an \"error\" key.\n\nTo prevent duplicate product IDs in the request payload, it is recommended to update the \"id\" key in the request body to send a random ID for each new product.\n"
			},
			"response": []
		},
		{
			"name": "Update Product Test Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5101a5bd-59c9-451b-985b-cb6baa1433b3",
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"var template = `\r",
							"<style type=\"text/css\">\r",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
							"    .tftable tr {background-color:#ffffff;}\r",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
							"    .tftable tr:hover {background-color:#e0ffff;}\r",
							"</style>\r",
							"\r",
							"<table class=\"tftable\" border=\"1\">\r",
							"    <tr>\r",
							"        <th>ID</th>\r",
							"        <th>Brand</th>\r",
							"        <th>Category</th>\r",
							"        <th>Description</th>\r",
							"        <th>Discount Percentage</th>\r",
							"        <th>Images</th>\r",
							"        <th>Price</th>\r",
							"        <th>Rating</th>\r",
							"        <th>Stock</th>\r",
							"        <th>Thumbnail</th>\r",
							"        <th>Title</th>\r",
							"    </tr>\r",
							"    <tr>\r",
							"        <td>{{response.id}}</td>\r",
							"        <td>{{response.brand}}</td>\r",
							"        <td>{{response.category}}</td>\r",
							"        <td>{{response.description}}</td>\r",
							"        <td>{{response.discountPercentage}}</td>\r",
							"        <td>{{response.images}}</td>\r",
							"        <td>{{response.price}}</td>\r",
							"        <td>{{response.rating}}</td>\r",
							"        <td>{{response.stock}}</td>\r",
							"        <td>{{response.thumbnail}}</td>\r",
							"        <td>{{response.title}}</td>\r",
							"    </tr>\r",
							"</table>\r",
							"`;\r",
							"\r",
							"function constructVisualizerPayload() {\r",
							"    return {response: pm.response.json()}\r",
							"}\r",
							"\r",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "9d83fc5d-3e3c-45d8-b94d-d16e01e16a59",
						"exec": [
							"// Function to generate a random 5-digit number with prefix 88\r",
							"function generateRandomId() {\r",
							"    const randomNumber = Math.floor(10000 + Math.random() * 90000);\r",
							"    return '88' + randomNumber;\r",
							"}\r",
							"\r",
							"// Generate the random ID\r",
							"const randomId = generateRandomId();\r",
							"\r",
							"// Set the random ID in the environment variable\r",
							"pm.environment.set(\"randomId\", randomId);\r",
							"\r",
							"// Send login request to get the token\r",
							"pm.sendRequest({\r",
							"    url: 'http://www.pseudojson.com/login',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'multipart/form-data'\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'formdata',\r",
							"        formdata: [\r",
							"            { key: 'username', value: 'admin' },\r",
							"            { key: 'password', value: 'admin' }\r",
							"        ]\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.error('Request failed:', err);\r",
							"        return;\r",
							"    }\r",
							"\r",
							"    try {\r",
							"        var jsonData = res.json();\r",
							"        pm.environment.set(\"Token\", jsonData.token);\r",
							"        console.log('Token:', jsonData.token);\r",
							"    } catch (e) {\r",
							"        console.error('Failed to parse JSON response:', e);\r",
							"        console.error('Response body:', res.text());\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "cdfc5ab3-c58c-4ecc-b033-d9a5ac605042",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"brand\": \"brand {{randomId}}\",\r\n    \"category\": \"category {{randomId}}\",\r\n    \"description\": \"description {{randomId}}-PUT\",\r\n    \"discountPercentage\": 12.96,\r\n    \"id\": 911{{randomId}},\r\n    \"images\": [\r\n        \"https://rightclickit.com.au/wp-content/uploads/2018/09/IMAGE-COMING-SOON-1000.jpg\"\r\n    ],\r\n    \"price\": 1449,\r\n    \"rating\": 12.69,\r\n    \"stock\": 188,\r\n    \"title\": \"title {{randomId}}-PUT\"\r\n}\r\n"
				},
				"url": {
					"raw": "http://www.pseudojson.com/products/911{{randomId}}",
					"protocol": "http",
					"host": [
						"www",
						"pseudojson",
						"com"
					],
					"path": [
						"products",
						"911{{randomId}}"
					]
				},
				"description": "\nThis HTTP POST request is used to create a new product on the server. The request should include a payload in the raw request body type with the keys \"brand\", \"category\", \"description\", \"discountPercentage\", \"id\", \"images\", \"price\", \"rating\", \"stock\", and \"thumbnail\". The last response returned a status code of 401 with a JSON body containing an \"error\" key.\n\nTo prevent duplicate product IDs in the request payload, it is recommended to update the \"id\" key in the request body to send a random ID for each new product.\n"
			},
			"response": []
		}
	]
}